{"version":3,"sources":["components/Review/Review.jsx","components/PageOne/PageOne.jsx","components/PageTwo/PageTwo.jsx","components/PageThree/PageThree.jsx","components/PageFour/PageFour.jsx","components/PageFive/PageFive.jsx","components/App/App.js","registerServiceWorker.js","index.js"],"names":["Review","react_default","a","createElement","className","this","props","reduxStore","feedbackList","pageUno","pageDos","pageTres","pageQuatro","Component","withRouter","connect","PageOne","handleChangeFor","event","_this","setState","target","value","clickHandler","dispatch","type","payload","state","history","push","onChange","Button_default","variant","color","onClick","components_Review_Review","PageTwo","PageThree","addResponsesToDb","console","log","body","axios","post","then","response","catch","error","clickHandlerDos","PageFive","App","HashRouter","Route","path","exact","component","PageFour","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","storeInstance","createStore","combineReducers","arguments","length","undefined","action","Object","objectSpread","applyMiddleware","logger","ReactDOM","render","es","store","components_App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.74c6b896.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport './Review.css';\n\n// this component will update the results for each response \nclass Review extends Component {\n\n    render() {\n        return (\n            <div className=\"results\">\n                <p>Feeling: {this.props.reduxStore.feedbackList.pageUno}</p>\n                <p>Understanding: {this.props.reduxStore.feedbackList.pageDos}</p>\n                <p>Support: {this.props.reduxStore.feedbackList.pageTres}</p>\n                <p>Comments: {this.props.reduxStore.feedbackList.pageQuatro}</p>\n            </div>\n        );\n    }\n}\n\nconst mapReduxStateToProps = (reduxStore) => ({\n    reduxStore\n})\n\nexport default withRouter(connect(mapReduxStateToProps)(Review));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Review from '../Review/Review.jsx';\nimport { withRouter } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\n\n\n\n\nclass PageOne extends Component {\n\n  handleChangeFor = (event) => {\n    this.setState({\n      pageUno: event.target.value\n    })\n  }\n\n// function to dispatch response to redux state\n// also function to switch to next page\n  clickHandler = () => {\n    this.props.dispatch(\n      { type: 'FEEDBACK_UNO', payload: this.state.pageUno });\n    this.props.history.push('/pageTwo');\n\n  }\n\n  render() {\n    return (\n      <div>\n        <p>1 of 4 pages</p>\n        <p>How are you feeling today?</p>\n        <input onChange={this.handleChangeFor}></input>\n        <Button variant=\"contained\" color=\"primary\" onClick={this.clickHandler}>Enter</Button>\n        <Review />\n      </div>\n    );\n  }\n}\n\nconst mapReduxStateToProps = (reduxStore) => ({\n  reduxStore\n})\n\nexport default withRouter(connect(mapReduxStateToProps)(PageOne));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Review from '../Review/Review.jsx';\nimport { withRouter } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\n\n\n\nclass PageTwo extends Component {\n\n    handleChangeFor = (event) => {\n        this.setState({\n            pageDos: event.target.value\n        })\n    }\n\n// function to dispatch response to redux state\n// also function to switch to next page\n    clickHandler = () => {\n        this.props.dispatch(\n            { type: 'FEEDBACK_DOS', payload: this.state.pageDos });\n        this.props.history.push('/pageThree');\n    }\n\n    render() {\n        return (\n            <div>\n                <p>2 of 4 pages</p>\n                <p>How well are you understanding the content?</p>\n                <input onChange={this.handleChangeFor}></input>\n                <Button  variant=\"contained\" color=\"primary\" onClick={this.clickHandler}>Enter</Button>\n                <Review />\n            </div>\n        );\n    }\n}\n\nconst mapReduxStateToProps = (reduxStore) => ({\n    reduxStore\n})\n\nexport default withRouter(connect(mapReduxStateToProps)(PageTwo));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Review from '../Review/Review.jsx';\nimport { withRouter } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\n\n\n\nclass PageThree extends Component {\n\n    handleChangeFor = (event) => {\n        this.setState({\n            pageTres: event.target.value\n        })\n    }\n\n// function to dispatch response to redux state\n// also function to switch to next page\n    clickHandler = () => {\n        this.props.dispatch(\n            { type: 'FEEDBACK_TRES', payload: this.state.pageTres });\n        this.props.history.push('/pageFour');\n    }\n\n    render() {\n        return (\n            <div>\n                <p>3 of 4 pages</p>\n                <p>How well are you being supported?</p>\n                <input onChange={this.handleChangeFor}></input>\n                <Button   variant=\"contained\" color=\"primary\" onClick={this.clickHandler}>Enter</Button>\n                <Review />\n            </div>\n        );\n    }\n}\n\nconst mapReduxStateToProps = (reduxStore) => ({\n    reduxStore\n})\n\nexport default withRouter(connect(mapReduxStateToProps)(PageThree));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Review from '../Review/Review.jsx';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\n\n\n\nclass PageTwo extends Component {\n\n    handleChangeFor = (event) => {\n        this.setState({\n            pageQuatro: event.target.value\n        })\n    }\n\n// function to dispatch response to redux state\n// also function to switch to next page\n    clickHandler = () => {\n        this.props.dispatch(\n            { type: 'FEEDBACK_QUATRO', payload: this.state.pageQuatro });\n    }\n// this function makes the axios call to the server to push the responses to the DB\n    addResponsesToDb = () => {\n        console.log('in addResponsesToDb')\n        let body = this.props.reduxStore.feedbackList;\n        console.log('body', body);\n        axios.post('/api/feedback', body).then(response => {\n            console.log('response',response);\n        }).catch(error => {\n            console.log('error',error);\n        })\n    }\n// function to switch to next page\n    clickHandlerDos = () => {\n        this.addResponsesToDb();\n        this.props.history.push('/pageFive');\n    }\n\n    render() {\n        return (\n            <div>\n                <p>4 of 4 pages</p>\n                <p>Any comments?</p>\n                <input onChange={this.handleChangeFor}></input>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.clickHandler}>Enter</Button>\n                <Button variant=\"contained\" onClick={this.clickHandlerDos}>Submit</Button>\n                <Review />\n            </div>\n        );\n    }\n}\n\nconst mapReduxStateToProps = (reduxStore) => ({\n    reduxStore\n})\n\nexport default withRouter(connect(mapReduxStateToProps)(PageTwo));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\n\n\n\n\nclass PageFive extends Component {\n\n// this function will take us to a different page when the button is clicked\n    clickHandler = () => {\n        this.props.history.push('/');\n    }\n\n    render() {\n        return (\n            <div>\n                <p>Thank You For Your Feedback!</p>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.clickHandler}>Next</Button>\n            </div>\n        );\n    }\n}\n\nconst mapReduxStateToProps = (reduxStore) => ({\n    reduxStore\n})\n\nexport default withRouter(connect(mapReduxStateToProps)(PageFive));\n","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport PageOne from '../PageOne/PageOne.jsx';\nimport PageTwo from '../PageTwo/PageTwo.jsx';\nimport PageThree from '../PageThree/PageThree.jsx';\nimport PageFour from '../PageFour/PageFour.jsx';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport PageFive from '../PageFive/PageFive';\n\n\nclass App extends Component {\n// this will render information on each component called \n//also show each component depending on the route \n  render() {\n\n    return (\n      <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Feedback!</h1>\n        </header>\n        <div className=\"Routes\">\n        <Route path=\"/\" exact component={PageOne} />\n        <Route path=\"/pageTwo\" exact component={PageTwo} />\n        <Route path=\"/pageThree\" exact component={PageThree} />\n        <Route path=\"/pageFour\" exact component={PageFour} />\n        <Route path=\"/pageFive\" exact component={PageFive} />\n        </div>\n        </div>\n      \n      </Router>\n    );\n  }\n}\n\nconst mapReduxStateToProps = (reduxStore) => ({\n  reduxStore\n})\n\nexport default connect(mapReduxStateToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\n\n// reducer to hold data for each response \nconst feedbackList = (state = {\n    pageUno: 0,\n    pageDos: 0,\n    pageTres: 0,\n    pageQuatro: ''\n}, action) => {\n    switch (action.type ) {\n        case \"FEEDBACK_UNO\":\n            return {...state, pageUno: action.payload};\n            case \"FEEDBACK_DOS\":\n            return {...state, pageDos: action.payload};\n            case \"FEEDBACK_TRES\":\n            return {...state, pageTres: action.payload};\n            case \"FEEDBACK_QUATRO\":\n            return {...state, pageQuatro: action.payload};\n\n        default:\n            return state;\n    }\n}\n\nconst storeInstance = createStore(\n    combineReducers({\n        feedbackList\n    }),\n    applyMiddleware(logger)\n);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}